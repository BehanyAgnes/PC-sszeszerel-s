using NUnit.Framework;

[TestFixture]
public class MathHelperTests
{
    private Calculator _calculator;

    // Ez a metódus minden teszt futtatása előtt lefut
    [SetUp]
    public void SetUp()
    {
        _calculator = new Calculator();
    }

    [Test]
    public void Add_Numbers_ReturnsCorrectSum()
    {
        // Arrange: előkészítés
        double a = 5;
        double b = 3;

        // Act: a tényleges metódus meghívása
        double result = _calculator.Add(a, b);

        // Assert: az eredmény ellenőrzése
        Assert.AreEqual(8, result);
    }

    [Test]
    public void Subtract_Numbers_ReturnsCorrectResult()
    {
        // Arrange
        double a = 10;
        double b = 4;

        // Act
        double result = _calculator.Subtract(a, b);

        // Assert
        Assert.AreEqual(6, result);
    }

    [Test]
    public void Mul_Numbers_ReturnsCorrectResult()
    {
        // Arrange
        double a = 5;
        double b = 3;

        // Act
        double result = _calculator.Multiply(a, b);

        // Assert
        Assert.AreEqual(15, result);
    }

    [Test]
    public void Div_Numbers_ReturnsCorrectResult()
    {
        // Arrange
        double a = 10;
        double b = 5;

        // Act
        double result = _calculator.Divide(a, b);

        // Assert
        Assert.AreEqual(2, result);
    }

    [Test]
    public void Sqr_Numbers_ReturnsCorrectResult()
    {
        double a = 5;
        double result = _calculator.Square(a);

        Assert.AreEqual(25, result);
    }

    [Test]
    public void Sqrrt_Numbers_ReturnsCorrectResult()
    {
        double a = 36;
        double result = _calculator.SquareRoot(a);
        Assert.AreEqual(6, result);
    }

    [Test]
    public void Avg_Numbers_ReturnsCorrectResult()
    {
        double[] a = { 10, 20, 30 };
        double result = _calculator.Average(a);
        Assert.AreEqual(20, result);
    }

    [Test]
    public void GCD_Numbers_ReturnsCorrectResult()
    {
        int a = 10;
        int b = 20;
        int result = _calculator.GCD(a, b);
        Assert.AreEqual(10, result);
    }

    [Test]
    public void LCM_Numbers_ReturnsCorrectResult()
    {
        int a = 10;
        int b = 20;
        int result = _calculator.LCM(a, b);
        Assert.AreEqual(20, result);
    }

    [Test]
    public void Even_Numbers_ReturnsCorrectResult()
    {
        int a = 10;
        bool result = _calculator.IsEven(a);
        Assert.AreEqual(true, result);
    }

    [Test]
    public void Prime_Numbers_ReturnsCorrectResult()
    {
        int a = 13;
        bool result = _calculator.IsPrime(a);
        Assert.AreEqual(true, result);
    }

}
